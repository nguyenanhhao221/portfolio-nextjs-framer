import type { GetStaticProps, InferGetStaticPropsType } from 'next';
import Head from 'next/head';
import React from 'react';
import { MainPage } from '../components/MainPage';
import { dehydrate, DehydratedState, QueryClient } from '@tanstack/react-query';
import { getProjects } from '../helpers/requests';
import { TProject } from '../types';

const Home = ({
  projectData,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  return (
    <>
      <Head>
        <title>Hao Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainPage projectData={projectData} />
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<{
  dehydratedState: DehydratedState;
  projectData: TProject[] | false;
}> = async () => {
  //Setup react-query to refetch data, also disable some default options.
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        refetchOnReconnect: false,
        refetchOnWindowFocus: false,
      },
    },
  });

  await queryClient.prefetchQuery(['getProjects'], () => getProjects());
  // React query type ?
  //* Because this data can be undefined , if it is undefined, the getServerSideProps cannot serialized it into JSON and the app will break, so as a work around, we have to check if this data is undefined then we return the props.projectData as false
  //Then we handle logic to render when data is false in child component
  const projectData: TProject[] | undefined = queryClient.getQueryData([
    'getProjects',
  ]);

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
      projectData: projectData ? projectData : false,
    },
  };
};
